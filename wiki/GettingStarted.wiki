#summary a quick step-by-step guide on how to create own SOS project
#labels Phase-Deploy,Phase-Implementation,Featured

=Getting started=

This is a quick guide on how to get your own SOS application up and running. It will refer to the Budapest demo application as an example, which does not include agent learning.

When creating a new project based on the SOSGeneric software, it is recommended to read the SystemOverview page to get an idea of the most important classes and data structures.

To get your system ready, two separate projects need to be build: an application specific server and an application specific data client. Both applications require the 'sos_generic.jar' and 'htmlentities.jar' libraries, additionally the server requires the weka and mysql connector libraries. All of these libraries can be found in the repository under the SOSLibraries project.

==The server==

The server manages the storage of each agent and generates a HTML interface to the data of the system. Creating your own server heavily relies on existing SOSGeneric classes, which need to be extended. The following steps need to be finished in order do create your own.

===Step 1: create an application specific Agent===

Create a new class which extends the Agent class from the SOSGeneric project. Implement the required methods and create a constructor which calls super with the id of the agent being constructed. The act and lastWish methods don't need to contain any functional code if your application doesn't include learning. The three generate methods handle the building of the response to the user, by building a map and content in the details pane in the web interface. The generateMapBalloonContent method may be overridden to create your own custom balloon for a map marker. Have a look at BudapestObjectAgent.java for further details.

===Step 2: create a home Agent (optional)===

SOS can use a default agent to generate the home page of its interface (to be compared with an index.html). This is an agent a special id, which can be set in the settings file (see step 5). This can be any agent already present in the system. The agent should be hidden from inclusion in the interface by giving it a BooleanProperty with the Agent.HIDDEN static as name and its value set to "true". See the BudapestHomeAgent.java file.

===Step 3: create a application specific AgentFactory===

An AgentFactory is used by the SOS project to build agents, based on the id of the agent to be created. Each project based on SOS must have its own AgentFactory to create agents specific for that application.
So, create a new class which extends AgentFactory, and implement the createSpecificAgent method, as can be seen in the BudapestAgentFactory.java file.
NOTE: reserved agent ids are: index, mobile, menu, search and stats, do not use them in your project!

===Step 4: create your SOSServer===

To run as a server, your project needs a class wich extends the SOSServer class. 
Add a public static void main method to be able to run the server. This is also the place to read a configuration file which should be passed to the constructor (the configuration file will be covered in the next step).
The constructor should call "super" with settings, an instance of the at step 3 created AgentFactory and a HashMap with passwords for accessing the web interface (pass an empty HashMap if you don't require any authentication). In the constructor default agents can be added and finally the "runServer" method should be called to start the actual server. See SOSBudapestServer.java as an example.

===Step 5: create a configuration file===

A configuration file is used by SOS to read some project specific settings. All values from the config.ini file in the SOSBudapestApplication are used, so don't forget to set them properly. For a detailed description of each setting, visit the [Settings] wiki page.

===Step 6: add resources===

As can be seen in the configuration file, there is a directory which holds all external resources for the web interface. This includes mainly image files but could also be JavaScript files. Each type of agent (covered in the client part) requires 3 image files: {type}.png (used on the map), {type}_icon.png (used in the map balloon) and {type}_icon_menu.png (used in the menu). Also, a favicon.ico may be added, as well as an icon for the "all" menu item and an application icon (as set in the configuration file).

===Step 7: create a database===

To store all data generated by your application, a database is used. Currently a MySQL implementation is available. All you need to do is create a new database and configure it properly via the configuration file, the tables are created automatically.

Now your server is ready to be run! Next you will need a client to start adding agents.

==The data client==

To add data and meaning to your system, Agents have to be added to the server. This is done via a separate client, which communicates with the server. It relies less on the existing SOSGeneric classes than the server. A client can be very complex, or very simple like the SOSBudapestDataClient, depending on your project.

===Step 1: Create a data client===

Because the data for your application can be provided in many ways, there is not an easy way to describe a generic data client. Taking the SOSBudapestDataClient as an example, it uses a KML file from the web (or locally), which is actually an XML file. Parsing this file, an agent is created for each place, using an EmptyAgent instance. This is practical, because an Agent on the client side does not need any behaviour, so this generic type of agent will only provide Property storage. As can be seen in KMLParser.java, several properties are set for each agent. In this case they are all important: id (via the constructor), the type of agent, the label, description and location if you want to see the agent on the map. When the agents have been created by the parser, the SOSBudapestDataClient does some post-processing of a few properties. After this, the agents are send to the server by using a RemoteAgentCollection, which in this case is constructed using static strings from the BudapestClientSettings class.

==Done!==

That's it! Make sure the password, address and XML communication port match in the server and client settings, run your server and then your client. After the client has sent the agents to the server, you should be able to see them on the map by surfing to the server address with the right port (http://localhost:4569/ of the Budapest demo).